{"version":3,"sources":["Pixel.js","ColorPicker.js","App.js","serviceWorker.js","Connection.js","index.js"],"names":["UPDATE_COLOR","gql","Pixel","id","color","newColor","useState","pixelColor","changeColor","useMutation","updatePixelColor","useEffect","className","onClick","variables","style","backgroundColor","colorChoices","Color","props","handleClick","ColorPicker","map","key","GET_PIXELS","App","useSubscription","loading","error","data","console","log","pixels","pixel","idx","href","target","rel","Boolean","window","location","hostname","match","ApolloClient","cache","InMemoryCache","link","WebSocketLink","uri","options","reconnect","ReactDOM","render","client","connection","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2hBAIA,IAAMA,EAAeC,YAAH,KA6BHC,EAlBD,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAAe,EACPC,mBAASF,GADF,mBAClCG,EADkC,KACtBC,EADsB,OAEdC,YAAYT,GAAhCU,EAFkC,oBAMzC,OAHAC,qBAAU,WACRH,EAAYJ,KACX,CAACA,IAEF,0BACEQ,UAAU,QACVC,QAAS,WACPL,EAAYH,GACZK,EAAiB,CAAEI,UAAW,CAAEX,KAAIC,MAAOC,MAE7CU,MAAO,CAAEC,gBAAiBT,MC1B1BU,EAAe,CACnB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAGIC,EAAQ,SAAAC,GAAK,OACjB,0BACEP,UAAU,gBACVG,MAAO,CAAEC,gBAAiBG,EAAMf,OAChCS,QAAS,WACPM,EAAMC,YAAYD,EAAMf,WAafiB,EARK,SAAAF,GAAK,OACvB,yBAAKP,UAAU,WACZK,EAAaK,KAAI,SAAClB,EAAOD,GAAR,OAChB,kBAAC,EAAD,CAAOiB,YAAa,kBAAMD,EAAMX,YAAYJ,IAAQA,MAAOA,EAAOmB,IAAKpB,S,mLCtB7E,IAAMqB,E,MAAavB,GAAH,KAwDDwB,MA/Cf,WAAgB,IAAD,EACoBC,YAAgBF,GAAzCG,EADK,EACLA,QAASC,EADJ,EACIA,MAAOC,EADX,EACWA,KADX,EAEgBvB,mBAAS,SAFzB,mBAENF,EAFM,KAECI,EAFD,KAGb,OAAImB,EAEA,6FAGFG,QAAQC,IAAIH,GAGZ,6BACE,wBAAIhB,UAAU,OAAd,uCACA,yBAAKA,UAAU,WACb,yBAAKA,UAAU,QAAf,QACA,2CACA,kBAAC,EAAD,CAAaJ,YAAaA,IAC1B,4CACA,yBAAKI,UAAU,aACZiB,EAAKG,OAAOV,KAAI,SAACW,EAAOC,GAAR,OACf,kBAAC,EAAD,CACE9B,MAAO6B,EAAM7B,MACbD,GAAI8B,EAAM9B,GACVoB,IAAKU,EAAM9B,GACXE,SAAUD,SAKlB,iHAIA,+CACA,sNAG6C,IAC3C,uBAAG+B,KAAK,KAAR,2BAEF,yBAAKvB,UAAU,UACf,yBAAKA,UAAU,QAAf,YAA+B,uBAAGuB,KAAK,GAAGC,OAAO,SAASC,IAAI,MAA/B,gCC5CjBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BCFS,MAAIC,IAAa,CAC9BC,MAAO,IAAIC,IACXC,KAAM,IAAIC,IAAc,CACtBC,IAAK,kDACLC,QAAS,CACPC,WAAW,OCZjBC,IAASC,OACP,kBAAC,IAAD,CAAgBC,OAASC,GACvB,kBAAC,EAAD,MAAQ,KAEVC,SAASC,eAAe,SFsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.88658c59.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { gql } from \"apollo-boost\";\nimport { useMutation } from \"@apollo/react-hooks\";\n\nconst UPDATE_COLOR = gql`\n  mutation ChangePixelColor($id: Int!, $color: String!) {\n    update_pixels(where: { id: { _eq: $id } }, _set: { color: $color }) {\n      returning {\n        color\n        id\n      }\n    }\n  }\n`;\n\nconst Pixel = ({ id, color, newColor }) => {\n  const [pixelColor, changeColor] = useState(color);\n  const [updatePixelColor] = useMutation(UPDATE_COLOR);\n  useEffect(() => {\n    changeColor(color);\n  }, [color]);\n  return (\n    <span\n      className=\"pixel\"\n      onClick={() => {\n        changeColor(newColor);\n        updatePixelColor({ variables: { id, color: newColor } });\n      }}\n      style={{ backgroundColor: pixelColor }}\n    ></span>\n  );\n};\n\nexport default Pixel;\n","import React from \"react\";\n\nconst colorChoices = [\n  \"#f44336\",\n  \"#f06292\",\n  \"#9c27b0\",\n  \"#2196f3\",\n  \"#009688\",\n  \"#8bc34a\",\n  \"#ffeb3b\",\n  \"#ff9800\",\n  \"#ffffff\",\n  \"#212121\"\n];\n\nconst Color = props => (\n  <span\n    className=\"palette-color\"\n    style={{ backgroundColor: props.color }}\n    onClick={() => {\n      props.handleClick(props.color);\n    }}\n  ></span>\n);\n\nconst ColorPicker = props => (\n  <div className=\"palette\">\n    {colorChoices.map((color, id) => (\n      <Color handleClick={() => props.changeColor(color)} color={color} key={id} />\n    ))}\n  </div>\n);\n\nexport default ColorPicker;\n","import React, { useState } from \"react\";\nimport Pixel from \"./Pixel\";\nimport ColorPicker from \"./ColorPicker\";\nimport { useSubscription } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\n\nconst GET_PIXELS = gql`\n  subscription GetPixels {\n    pixels(order_by: { id: asc }) {\n      color\n      id\n    }\n  }\n`;\n\nfunction App() {\n  const { loading, error, data } = useSubscription(GET_PIXELS);\n  const [color, changeColor] = useState(\"white\");\n  if (loading) {\n    return (\n      <div>loading ... just wait please it'll be drawing time soon ...</div>\n    );\n  } else {\n    console.log(error);\n  }\n  return (\n    <div>\n      <h1 className=\"top\"> Live web Sockets Pixel Art _-_ BWL</h1>\n      <div className=\"content\">\n        <div className=\"logo\">Draw</div>\n        <p>Pick a Color</p>\n        <ColorPicker changeColor={changeColor} />\n        <p>Click a Pixel</p>\n        <div className=\"container\">\n          {data.pixels.map((pixel, idx) => (\n            <Pixel\n              color={pixel.color}\n              id={pixel.id}\n              key={pixel.id}\n              newColor={color}\n            />\n          ))}\n        </div>\n      </div>\n      <h2>\n        Other users anywhere accessing the site can click and update a color at\n        any time!\n      </h2>\n      <h3>Pretty cool huh</h3>\n      <p>\n        This is all thanks to web sockets providing a live link from this rect\n        front end to a free api for each of the squares created on Heroku with\n        the amazing Hasura App. Give them a try at{\" \"}\n        <a href=\"#\">HASURA FREE QUICK DEMO</a>\n      </p>\n      <div className=\"space\"></div>\n      <div className=\"foot\"> Made by <a href=\"\" target=\"_blank\" rel=\"no\" >Brian Loveless Portfolio</a></div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// import { HttpLink } from \"apollo-link-http\";\n// import { ApolloClient } from \"apollo-client\";\n// import { InMemoryCache } from \"apollo-cache-inmemory\";\n\n// export default new ApolloClient({\n//   cache: new InMemoryCache(),\n//   link: new HttpLink({\n//     uri: \"https://bwl-has-pixelart.herokuapp.com/v1/graphql\"\n//   })\n// });\n\n\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\n\nexport default new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new WebSocketLink({\n    uri: \"wss://bwl-has-pixelart.herokuapp.com/v1/graphql\",\n    options: {\n      reconnect: true\n    }\n  })\n});","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport connection from \"./Connection\";\n\n\nReactDOM.render(\n  <ApolloProvider client={ connection } >\n    <App />{\" \"}\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}